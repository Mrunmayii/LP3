import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt



df = pd.read_csv('uber.csv')


# >Preprocessing Dataset



df.head()




df.drop(["Unnamed: 0", "key"], axis = 1, inplace = True)
df.head()




df.isnull().sum()



df['dropoff_longitude'].fillna(value = df['dropoff_longitude'].mean(), inplace = True)
df['dropoff_latitude'].fillna(value = df['dropoff_latitude'].median(), inplace = True)




df.isnull().sum()


# #### Column pickup_datetime is in wrong format (Object). Convert it to DateTime Format



df.pickup_datetime = pd.to_datetime(df.pickup_datetime, errors = 'coerce')

df.dtypes


df = df.assign(hour = df.pickup_datetime.dt.hour,
               day = df.pickup_datetime.dt.day,
               month = df.pickup_datetime.dt.month,
               year = df.pickup_datetime.dt.year)
df.drop('pickup_datetime', axis = 1, inplace = True)
df.head()


# #### Removing outliers



df.plot(kind = 'box', subplots = True, layout = (7,2), figsize=(10,20))


def rm_out(df1, col): 
    Q1 = df1[col].quantile(0.25)
    Q3 = df1[col].quantile(0.75)
    IQR = Q3-Q1
    L = Q1 - 1.5*IQR
    R = Q3 + 1.5*IQR
    df[col] = np.clip(df1[col], L, R)
    return df1

def treat_all(df1, col_list):
    for c in col_list:
        df1 = rm_out(df, c)
    return df1

df = treat_all(df, df.iloc[:, 0::])


df.plot(kind = 'box', subplots = True, layout = (7,2), figsize=(10,20))




import haversine as hn
total_dist = []
for pos in range(len(df['pickup_longitude'])):
    lng1, lat1, lng2, lat2 = [df['pickup_longitude'][pos], df['pickup_latitude'][pos], df['dropoff_longitude'][pos], df['dropoff_latitude'][pos]]
    loc1 = (lat1, lng1)
    loc2 = (lat2, lng2)
    c = hn.haversine(loc1, loc2)
    total_dist.append(c)
df['total_dist'] = total_dist


df.head()


df.isnull().sum()


# ## Linear Regression Model



corr = df.corr()
fig = plt.subplots(figsize = (15,10))
sns.heatmap(corr, annot = True )


# ### fare amount and total_dist are highly related


x = df[['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','passenger_count','hour','day','month','year','total_dist']]
y = df['fare_amount']
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(x,y,test_size = 0.33)




from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

lr = LinearRegression()
lr.fit(X_train,y_train)


y_pred = lr.predict(X_test) #To predict the target values


accuracy = r2_score(y_test, y_pred)
accuracy

from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, y_pred)
mse

rmse = np.sqrt(mse)
rmse

# ## Random Forest



from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor(n_estimators=100)
rf.fit(X_train,y_train)


y_pred = rf.predict(X_test)
y_pred


accuracy = r2_score(y_test, y_pred)
accuracy

