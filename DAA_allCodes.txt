//huffman
//O(nlogn) where n is the number of unique characters. 
//If there are n nodes, extractMin() is called 2*(n â€“ 1) times. 
//extractMin() takes O(logn) time as it calls minHeapify(). 
#include <iostream>
#include <queue>
#include <map>
using namespace std;

// Structure to store a Huffman tree node
struct MinHNode {
  char data;
  int freq;
  MinHNode* left;
  MinHNode* right;

  MinHNode(char data, int freq) : data(data), freq(freq), left(nullptr), right(nullptr) {}
};

// Comparison function for the priority queue
struct Compare {
  bool operator()(MinHNode* l, MinHNode* r) {
    return l->freq > r->freq;
  }
};

// Build the Huffman tree and return the root
MinHNode* buildHuffmanTree(map<char, int> freq) {
  priority_queue<MinHNode*, vector<MinHNode*>, Compare> pq;

  for (auto it = freq.begin(); it != freq.end(); ++it) {
    char data = it->first;
    int frequency = it->second;
    pq.push(new MinHNode(data, frequency));
}

  while (pq.size() > 1) {
    MinHNode* left = pq.top(); 
    pq.pop();
    MinHNode* right = pq.top(); 
    pq.pop();

    MinHNode* top = new MinHNode('$', left->freq + right->freq);
    top->left = left;
    top->right = right;

    pq.push(top);
  }

  return pq.top();
}

// Print Huffman codes
void printHuffmanCodes(MinHNode* root, string code) {
  if (!root)
    return;

  if (root->data != '$') {
    cout << root->data << " : " << code << endl;
  }

  printHuffmanCodes(root->left, code + "0");
  printHuffmanCodes(root->right, code + "1");
}

// Wrapper function to encode
void huffmanEncoding(map<char, int> freq) {
  MinHNode* root = buildHuffmanTree(freq);
  printHuffmanCodes(root, "");
}

int main() {
  int n;
  cout<<"Enter number of characters" <<endl;
  cin>>n;
  map<char, int> freq;
  for(int i=0;i<n;i++) {
    cout<<"Enter character and frequency" <<endl;
    char x;
    int fre;
    cin>>x>>fre;
    freq.insert(make_pair(x,fre));
  }


  cout << "Huffman Codes:\n";
  huffmanEncoding(freq);

  return 0;
}


//0/1 knapsack
//tc = O(n*w)
#include <iostream>
using namespace std;
int max(int x, int y) {
   return (x > y) ? x : y;
}
int knapSack(int W, int w[], int v[], int n) {
   int i, wt;
   int K[n + 1][W + 1];
   for (i = 0; i <= n; i++) {
      for (wt = 0; wt <= W; wt++) {
         if (i == 0 || wt == 0)
         K[i][wt] = 0;
         else if (w[i - 1] <= wt)
            K[i][wt] = max(v[i - 1] + K[i - 1][wt - w[i - 1]], K[i - 1][wt]);
         else
        K[i][wt] = K[i - 1][wt];
      }
   }
   return K[n][W];
}
int main() {
   cout << "Enter the number of items in a Knapsack:";
   int n, W;
   cin >> n;
   int v[n], w[n];
   for (int i = 0; i < n; i++) {
      cout << "Enter value and weight for item " << i << ":";
      cin >> v[i];
      cin >> w[i];
   }
   cout << "Enter the capacity of knapsack";
   cin >> W;
   cout << knapSack(W, w, v, n);
   return 0;
}



//fractional knp O(N*logN)
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Item {
    double weight;
    double value;
    double valuePerWeight; // Profit by Weight ratio

    Item(double w, double v){
      this->weight = w;
      this->value = v;
        this->valuePerWeight = v / w;
    }
};

bool compareItems(const Item& a, const Item& b) {
    return a.valuePerWeight > b.valuePerWeight;
}

double fractionalKnapsack(vector<Item>& items, int capacity) {

    // sorting according to p/w ratio in decreasing order
    sort(items.begin(), items.end(), compareItems);

    double totalValue = 0.0;

    for(int i = 0; i <items.size(); i++) {
        if (capacity >= items[i].weight) {
            totalValue += items[i].value;
            capacity -= items[i].weight;
        } else {
            totalValue += (capacity / items[i].weight) * items[i].value;
            break;
        }
    }

    return totalValue;
}

int main() {
    int n; // Number of items
    int capacity; // Knapsack capacity
    cout << "Enter the number of items: ";
    cin >> n;
    cout << "Enter the knapsack capacity: ";
    cin >> capacity;

    vector<Item> items;

    for (int i = 0; i < n; ++i) {
        int weight, value;
        cout << "Enter the weight and value of item " << (i + 1) << ": ";
        cin >> weight >> value;
        items.push_back(Item(weight, value));
    }

    double maxTotalValue = fractionalKnapsack(items, capacity);

    cout << "Maximum Profit: " << maxTotalValue << endl;

    return 0;
}


//n queens O(n!)
#include<bits/stdc++.h>
using namespace std;


void display(vector<vector<int>>& board) {
  for (int i = 0; i < board.size(); i++) {
    for (int j = 0; j < board.size(); j++) {
      if (board[i][j] == 1) {
        cout << "Q ";
      }
      else cout << "X ";
    }
    cout << endl;
  }
  cout << endl;
}

bool isSafe(vector<vector<int>>&board, int row, int col) {
  for (int i = row - 1; i >= 0; i--) {
    if (board[i][col] == 1) {
      return false;
    }
  }
  for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
    if (board[i][j] == 1) {
      return false;
    }
  }
  for (int i = row - 1, j = col + 1; i >= 0 && j < board.size(); i--, j++) {
    if (board[i][j] == 1) {
      return false;
    }
  }
  return true;

}


int nQueen(vector<vector<int>>& board, int row) {
  if (row == board.size()) {
    display(board);
    return 1;
  }
  int cnt = 0;
  for (int col = 0; col < board.size(); col++) {
    if (isSafe(board, row, col)) {
      board[row][col] = 1;
      cnt += nQueen(board, row + 1);
      board[row][col] = 0;
    }
  }
  return cnt;
}

int main() {
  int n;
  cin >> n;
  vector<vector<int>>board(n, vector<int>(n, 0));
  int ans = nQueen(board, 0);
  cout << ans << endl;
}


//fibonacci recursive O(2^n) exponential
#include <iostream>
using namespace std;
int fib(int x) {
   if((x==1)||(x==0)) {
      return(x);
   }else {
      return(fib(x-1)+fib(x-2));
   }
}
int main() {
   int x , i=0;
   cout << "Enter the number of terms of series : ";
   cin >> x;
   cout << "\nFibonnaci Series : ";
   while(i < x) {
      cout << " " << fib(i);
      i++;
   }
   return 0;
}

//fibonacci non recursive O(n)
//fibonacci using DP = O(n)
#include <iostream>  
using namespace std;  
int main() {  
  int n1=0,n2=1,n3,i,number;    
 cout<<"Enter the number of elements: ";    
 cin>>number;    
 cout<<n1<<" "<<n2<<" "; //printing 0 and 1    
 for(i=2;i<number;++i) //loop starts from 2 because 0 and 1 are already printed    
 {    
  n3=n1+n2;    
  cout<<n3<<" ";    
  n1=n2;    
  n2=n3;    
 }    
   return 0;  
   }  

//fibo dp
#include<iostream>
using namespace std;
int genFibonacci(int n) {
   int fibo[n+2]; 
   fibo[0] = 0;
   fibo[1] = 1;
   for (int i = 2; i <= n; i++) {
      fibo[i] = fibo[i-1] + fibo[i-2]; 
      two terms
   }
   return fibo[n];
}
int main () {
   int n;
   cout << "Enter number of terms: "; cin >>n;
   cout << n<<" th Fibonacci Terms: "<<genFibonacci(n)<<endl;
}
