import pandas as pd
import numpy as np
import seaborn as sns


df = pd.read_csv("Churn_Modelling.csv")


df.head()



df.dtypes


df.isna().sum()


df.columns


df = df.drop(['RowNumber', 'CustomerId', 'Surname'], axis=1)


#convert to categorical variables
print(df)


geography = pd.get_dummies(df['Geography'],drop_first = True, dtype=int)
gender = pd.get_dummies(df['Gender'],drop_first = True, dtype=int)



df = pd.concat([df, gender, geography], axis = 1)



df.drop(['Gender', 'Geography'], axis=1, inplace=True)
df



X = df[['CreditScore','Age','Tenure','Balance','NumOfProducts','HasCrCard','IsActiveMember','EstimatedSalary','Male','Germany','Spain']]
y = df['Exited']


# # Resampling Data
y.value_counts()


# # normalize values with min max scaler

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()




X_scaled = sc.fit_transform(X)
X_scaled


# ## model building

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size = 0.30)



from sklearn.neural_network import MLPClassifier



ann = MLPClassifier(hidden_layer_sizes=(100,100,100),
                   random_state = 0,
                   max_iter=100,
                   activation='relu')



ann.fit(X_train, y_train)



y_pred = ann.predict(X_test)



from sklearn.metrics import classification_report, accuracy_score
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)


print(report)

accuracy




# from imblearn.over_sampling import RandomOverSampler
# ros = RandomOverSampler(random_state = 0)
# x_res, y_res = ros.fit_resample(X_scaled,y)
# y_res.value_counts()

# perform normalization after this


